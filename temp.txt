
  
%{
	void yyerror (char const *s);
	#include<stdio.h>
	#include<stdlib.h>
	#include<string.h>
	int yylex();
	int typeno;
%}
%union {
  struct info{ 
		char* name;
        char* value;
		int quadvalue;
		char * quad;
	    char  variable;
		char * string;    
        int  type;
    }ourinfo;
}  

%start program
%token  <ourinfo>IDENTIFIER 
%token  <ourinfo> NUM
%token  <ourinfo> DECIMAL 
%token  <ourinfo> EXPCHAR
%token  <ourinfo> EXPSTR 
%token  CHAR INT FLOAT DOUBLE STRING VOID RETURN BOOL
%token  EQ LE GE AND OR L G NEQ
%token  ASSIGN
%token  FUNCNAME
%token  ADD SUB MUL DIV INC DEC REM
%token  XOR BitwiseAnd BitwiseOR
%token SEMICOLON COMMA IF THEN CONST
%token  OP CP OB CB
%token FALSE TRUE



%%

program
	: function
	;

line
	: statements SEMICOLON
	| statements SEMICOLON line
	;

function
	: type variable OP commondeclarations CP OB line CB
	| VOID value
	 OP commondeclarations CP OB line CB
	;

ReturnStmt
	: RETURN expr 
	| RETURN
	;


type 
	: INT   {  $<ourinfo>1.type = 2 ; $<ourinfo>$=$<ourinfo>1; typeno=2;printf("type1:%d,type2:%d\n",$<ourinfo>1.type,$<ourinfo>$);}
	| CHAR  {  $<ourinfo>1.type = 1 ; $<ourinfo>$=$<ourinfo>1; typeno=1}
	| FLOAT {  $<ourinfo>1.type = 3 ; $<ourinfo>$=$<ourinfo>1; typeno=3}
	| STRING {  $<ourinfo>1.type = 4 ; $<ourinfo>$=$<ourinfo>1; typeno=4} 
	| BOOL {  $<ourinfo>1.type = 5 ; $<ourinfo>$=$<ourinfo>1; typeno=5} 
	;


ReturnType
	: VOID
	| type
	;

variable
	: IDENTIFIER {  $<ourinfo>$.name=$<ourinfo>$.name; $<ourinfo>$.type=typeno;  printf("%d\n",$<ourinfo>$.type); }
	;


argument 
	: type variable
	| variable
	;


statements 
		: commondeclarations 
		| multiplearguments ASSIGN expr	
		| variable ASSIGN string
		| variable ASSIGN expr
		| variable INC
		| variable DEC
		| multipleConditions // TODO multipleConditions must be inside if block
		| ReturnStmt
		;

commondeclarations
	: multiplearguments 
	| CONST type variable ASSIGN number 
	| CONST type variable ASSIGN string 
	| multiplearguments ASSIGN string  
	;

multiplearguments
	: type variable
	| type variable multipledeclarations
	;

multipledeclarations
	: COMMA variable
	| COMMA variable multipledeclarations
	;

comparsions
	: Equals
	| GE 
	| LE 
	| L 
	| G 
	;

Equals
	: EQ
	| NEQ
	;
BitOperations
	: XOR
	| BitwiseOR
	| BitwiseAnd
	;

BOOLEANS
	: TRUE
	| FALSE
	;

multipleConditions
	: condition
	| condition logicals multipleConditions
	;

condition //(o/p of function or variable == bool )eq boolean 
	: expr comparsions expr  {printf("%d\n",$<ourinfo>$.type);}
	;

logicals
	: AND
	| OR
	;

number
	: NUM	
	| DECIMAL	
	;
	
string
	: EXPSTR 
	| EXPCHAR 
	;

MathOperations
	: ADD 
	| SUB
	;


expr 
    : expr BitOperations factor
	| expr2
	| BOOLEANS
	;

expr2
	: expr2  MathOperations factor
	| term 
	;

term
	: term MUL factor 
	| term DIV factor
	| factor
	;

factor
	: number
	| variable //a= a+3
	| OP expr CP
	;

	


%%




void yyerror (char const *s) {
	fprintf (stderr, "%s\n", s);
}

extern FILE *yyin;

int main()
{
	yyin=fopen("input.c","r");
	int yydebug=1;
	yyparse();
	
	fclose(yyin);
	
	return 0;
}



start:  Function
    | Declaration
    ;

/* Declaration block */
Declaration: Type Assignment ';'
    | Assignment ';'
    | FunctionCall ';'
    | ArrayUsage ';'
    | Type ArrayUsage ';'
    | StructStmt ';'
    | error
    ;

/* Assignment block */
Assignment: ID '=' Assignment
    | ID '=' FunctionCall
    | ID '=' ArrayUsage
    | ArrayUsage '=' Assignment
    | ID ',' Assignment
    | NUM ',' Assignment
    | ID '+' Assignment
    | ID '-' Assignment
    | ID '*' Assignment
    | ID '/' Assignment
    | NUM '+' Assignment
    | NUM '-' Assignment
    | NUM '*' Assignment
    | NUM '/' Assignment
    | '\'' Assignment '\''
    | '(' Assignment ')'
    | '-' '(' Assignment ')'
    | '-' NUM
    | '-' ID
    |   NUM
    |   ID
    ;

/* Function Call Block */
FunctionCall : ID'('')'
    | ID'('Assignment')'
    ;

/* Array Usage */
ArrayUsage : ID'['Assignment']'
    ;

/* Function block */
Function: Type ID '(' ArgListOpt ')' CompoundStmt
    ;
ArgListOpt: ArgList
    |
    ;
ArgList:  ArgList ',' Arg
    | Arg
    ;
Arg:    Type ID
    ;
CompoundStmt:   '{' StmtList '}'
    ;
StmtList:   StmtList Stmt
    |
    ;
Stmt:   WhileStmt
    | Declaration
    | ForStmt
    | IfStmt
    | PrintFunc
    | ';'
    ;

/* Type Identifier block */
Type:   INT
    | FLOAT
    | CHAR
    | DOUBLE
    | VOID
    ;

/* Loop Blocks */
WhileStmt: WHILE '(' Expr ')' Stmt
    | WHILE '(' Expr ')' CompoundStmt
    ;

/* For Block */
ForStmt: FOR '(' Expr ';' Expr ';' Expr ')' Stmt
       | FOR '(' Expr ';' Expr ';' Expr ')' CompoundStmt
       | FOR '(' Expr ')' Stmt
       | FOR '(' Expr ')' CompoundStmt
    ;

/* IfStmt Block */
IfStmt : IF '(' Expr ')'
        Stmt
    ;

/* Struct Statement */
StructStmt : STRUCT ID '{' Type Assignment '}'
    ;

/* Print Function */
PrintFunc : PRINTF '(' Expr ')' ';'
    ;

/*Expression Block*/
Expr:
    | Expr LE Expr
    | Expr GE Expr
    | Expr NE Expr
    | Expr EQ Expr
    | Expr GT Expr
    | Expr LT Expr
    | Assignment
    | ArrayUsage
    ;




